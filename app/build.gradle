apply plugin: 'com.android.application'
apply plugin: 'com.xll.gradlepack'
apply plugin: com.xll.second.TestLocalPlugin

//  gradle clean assembleBeta -PVERSION_CODE=5 -PVERSION_NAME=1.1.1 -POUT_PUT_DIR=/home/user/Desktop -PFILE_NAME
testPlugin {
    verCode=project.hasProperty("VERSION_CODE")?Integer.parseInt(VERSION_CODE):3
}


//cancel task
tasks.whenTaskAdded { task ->
    if (task.name.contains('AndroidTest')) {
        task.enabled = false
    }
}
//http://www.07net01.com/2015/11/964173.html
//task testExec(type:Exec) {
//    commandLine "cmd.exe" ,"/c" ,"dir"
//   def pw= standardOutput.newPrintWriter()
//
//    println("***************************************")
//    println("***************************************")
//
//}



task setWhoamiProperty {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
//                executable = 'cmd.exe /c dir'
                commandLine "cmd.exe" ,"/c" ,"dir"
                standardOutput = os
            }
            println("hahah"+os.toString() )
        }
    }
}

task getPath(){
    def path = "E:/material-design-icons-1.0.0\\action/1x_ios"
    println "oldPath:"+path
    String reg = '\\\\|/'
    String replace = '\\'+File.separator
    println "reg"+reg
    def newPath = path.replaceAll(reg,replace)
    println "newPath:"+newPath
}

task copyFile{
    def src = "C:\\Users\\Administrator\\Desktop\\tmp\\libm.so"
    def dst = "C:\\Users\\Administrator\\Desktop\\tmp\\libmtest.so"
    File dstFile = new File(dst)
    if (dstFile.exists() == false) {
        dstFile.createNewFile()
    }
    new File(src).withPrintWriter{ printWriter ->
        new File(dst).eachLine{ line->
            printWriter.println(line)
        }
    }
}

//https://my.oschina.net/sfshine/blog/726681
def replaceContent(String path,String source,String dest){

    def tt=new File(path).getText("UTF-8").replaceAll("String testFlag=.","String testFlag ="+dest);
    new File(path).write(tt,'UTF-8')
}

//add task
//http://www.open-open.com/lib/view/open1439216256770.html
afterEvaluate {
    android.applicationVariants.each { variant ->
        def dx = tasks.findByName("build")
        def hello = "hello${variant.name.capitalize()}"
        task(hello) << {
            println "hello"
            replaceContent("$projectDir\\src\\main\\java\\com\\xll\\administrator\\democollection\\MainActivity.java","111","hahah")
        }
        tasks.findByName(hello).dependsOn dx.taskDependencies.getDependencies(dx)
        dx.dependsOn tasks.findByName(hello)
    }
}


//替换文件的字符串
task replaceConstants<<{
}
//preBuild.dependsOn taskA

def fileReader(path,oldStr,newStr){

    def readerString="";
    new File(paht).withReader ("UTF-8"){
        reader->reader.eachLine {
            if(it.find(oldStr)){
                it=it.replace(oldStr,newStr)
            }
            readerString<<=it
            readerString<<'\n'
        }
            return readerString
    }
}


android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn 'ndkBuild', 'copyJniLibs'
//    }

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "com.xll.administrator.democollection"
        minSdkVersion 15
        targetSdkVersion 25
        targetCompatibility = '1.7'
        sourceCompatibility = '1.7'
        versionCode project.testPlugin.verCode
        versionName project.testPlugin.verName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "API_HOST", "\"t\"")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

// tasks.create("moveAPk",{
//    println "--------------------------"
//    println "moveApk out"
//    println "--------------------------"
//    doLast{
//        copy {
//            println "--------------------------"
//            println "moveApk in"
//            println "--------------------------"
//            from "$projectDir\\build"
//            into "$projectDir\\libs"
//        }
//
//    }
//
//})

task moveAPk(type:Copy) {
    println"${project.testPlugin.verCode}"
    println "--------------------------"
    println "moveApk out"
    println "--------------------------"
    doLast{
        println "--------------------------"
        println "moveApk in"
        println "--------------------------"
        from "$projectDir\\build"
        into "$projectDir\\libs"
    }
}


moveAPk.dependsOn "build"

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:recyclerview-v7:25.0.0'
    compile 'com.github.satyan:sugar:1.4'
    testCompile 'junit:junit:4.12'
//    compile 'com.xll.plugin:packplugin:1.0.0'
}
